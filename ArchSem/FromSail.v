(******************************************************************************)
(*                                ArchSem                                     *)
(*                                                                            *)
(*  Copyright (c) 2021                                                        *)
(*      Thibaut PÃ©rami, University of Cambridge                               *)
(*      Zonguyan Liu, Aarhus University                                       *)
(*      Nils Lauermann, University of Cambridge                               *)
(*      Jean Pichon-Pharabod, University of Cambridge, Aarhus University      *)
(*      Brian Campbell, University of Edinburgh                               *)
(*      Alasdair Armstrong, University of Cambridge                           *)
(*      Ben Simner, University of Cambridge                                   *)
(*      Peter Sewell, University of Cambridge                                 *)
(*                                                                            *)
(*  All files except SailArmInstTypes.v are distributed under the             *)
(*  license below (BSD-2-Clause). The former is distributed                   *)
(*  under a mix of BSD-2-Clause and BSD-3-Clause Clear, as described          *)
(*  in the file header.                                                       *)
(*                                                                            *)
(*                                                                            *)
(*  Redistribution and use in source and binary forms, with or without        *)
(*  modification, are permitted provided that the following conditions        *)
(*  are met:                                                                  *)
(*                                                                            *)
(*   1. Redistributions of source code must retain the above copyright        *)
(*      notice, this list of conditions and the following disclaimer.         *)
(*                                                                            *)
(*   2. Redistributions in binary form must reproduce the above copyright     *)
(*      notice, this list of conditions and the following disclaimer in the   *)
(*      documentation and/or other materials provided with the distribution.  *)
(*                                                                            *)
(*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       *)
(*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT         *)
(*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS         *)
(*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE            *)
(*  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,      *)
(*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,      *)
(*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS     *)
(*  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND    *)
(*  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR     *)
(*  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE    *)
(*  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *)
(*                                                                            *)
(******************************************************************************)

(** This file is dedicated to building SSC Interface instance from a sail
    generated coq model. The only part that is not automatically generated by
    now is pa manipulation functions *)


Require Import SailStdpp.ConcurrencyInterfaceTypesV2.
Require Import SailStdpp.ConcurrencyInterfaceV2.
Require Import SailStdpp.Values.
Require Import SailStdpp.Instances.

Module Type SailArch := Arch.
Module Type SailInterfaceT := InterfaceT.

Require Import ASCommon.Options.
Require Import ASCommon.Common.
Require Import ASCommon.Effects.

Require Import ASCommon.FMon.
Require Import Interface.

(** * Transparency management for [coq-sail] *)
#[export] Typeclasses Transparent choose_type.
#[export] Typeclasses Transparent mword.
#[export] Typeclasses Transparent MachineWord.MachineWord.word.
#[export] Typeclasses Transparent MachineWord.MachineWord.idx.
#[export] Typeclasses Transparent MachineWord.MachineWord.Z_idx.
#[export] Typeclasses Transparent Z.to_N.

(* TODO go in coq-sail and make those not exist *)
Arguments MachineWord.MachineWord.word / _.
Arguments MachineWord.MachineWord.idx /.
Arguments MachineWord.MachineWord.Z_idx / _.


(* TODO remove that in coq-sail *)
Remove Hints Decidable_eq_mword Countable_mword : typeclass_instances.

#[refine] Instance bitU_finite : Finite bitU := { enum := [B0; B1; BU] }.
Proof.
  - abstract(unshelve (auto with nodup); set_solver).
  - abstract(intros []; set_solver).
Defined.

(** * Missing Interface parts

This section defines a module type that describes everything ArchSem need from
an architecture instantiation that is missing from the Sail generated code *)
Module Type ArchExtra (SA : SailArch).
  Import SA.

  Parameter pc_reg : greg.
  Parameter pretty_greg : Pretty greg.
End ArchExtra.

(** * Convert from Sail generated instantiations to ArchSem ones *)

Module ArchFromSail (SA : SailArch) (AE : ArchExtra SA) <: Arch.
  Import (hints) SA.
  Definition reg := SA.greg.
  #[export] Typeclasses Transparent reg.
  Definition reg_eq : EqDecision reg := SA.greg_eq.
  #[export] Typeclasses Transparent reg_eq.
  Definition reg_countable : Countable reg := SA.greg_cnt.
  #[export] Typeclasses Transparent reg_countable.
  Definition pretty_reg : Pretty reg := AE.pretty_greg.
  #[export] Typeclasses Transparent reg_countable.


  Definition pc_reg := AE.pc_reg.
  #[export] Typeclasses Transparent pc_reg.

  Definition reg_type (r : reg) := match r with @SA.GReg A _ => A end.
  #[export] Instance reg_type_eq (r : reg) : EqDecision (reg_type r).
  Proof. destruct r. by apply SA.regval_eq. Defined.
  #[export] Instance reg_type_countable (r : reg) : Countable (reg_type r).
  Proof. destruct r. by apply SA.regval_cnt. Defined.
  #[export] Instance reg_type_inhabited (r : reg) : Inhabited (reg_type r).
  Proof. destruct r. by apply SA.regval_inhabited. Defined.
  #[export] Instance ctrans_reg_type : CTrans reg_type.
  Proof.
    intros [Tx x] [Ty y] e a. cbn in *.
    by eapply SA.regval_transport.
  Defined.
  #[export] Instance ctrans_reg_type_simpl : CTransSimpl reg_type.
  Proof. intros [Tx x] e a. apply SA.regval_transport_sound. Qed.
  #[export] Instance reg_type_eq_dep_dec : EqDepDecision reg_type.
  Proof.
    intros [Tx x] [Ty y] e a b.
    refine (dec_if (decide (ctrans e a = b)));
      abstract (dependent destruction e; simp ctrans in *; by rewrite JMeq_simpl).
  Defined.

  (* TODO get sail to generate reg_acc *)
  Definition reg_acc := option SA.sys_reg_id.
  #[export] Typeclasses Transparent reg_acc.
  #[local] Existing Instance SA.sys_reg_id_eq.
  Definition reg_acc_eq : EqDecision reg_acc := _.


  Definition addr_size := SA.addr_size.
  #[export] Typeclasses Transparent addr_size.
  Definition addr_space := SA.addr_space.
  #[export] Typeclasses Transparent addr_space.
  Definition addr_space_eq := SA.addr_space_eq.
  #[export] Typeclasses Transparent addr_space_eq.
  Definition addr_space_countable := SA.addr_space_countable.
  #[export] Typeclasses Transparent addr_space_countable.

  Definition CHERI := SA.CHERI.
  #[export] Typeclasses Transparent CHERI.
  Definition cap_size_log := SA.cap_size_log.
  #[export] Typeclasses Transparent cap_size_log.

  Definition mem_acc := SA.mem_acc.
  #[export] Typeclasses Transparent mem_acc.
  Definition mem_acc_eq : EqDecision mem_acc := _.
  #[export] Typeclasses Transparent mem_acc_eq.
  Definition is_explicit := SA.mem_acc_is_explicit.
  #[export] Typeclasses Transparent is_explicit.
  Definition is_ifetch := SA.mem_acc_is_ifetch.
  #[export] Typeclasses Transparent is_ifetch.
  Definition is_ttw := SA.mem_acc_is_ttw.
  #[export] Typeclasses Transparent is_ttw.
  Definition is_relaxed := SA.mem_acc_is_relaxed.
  #[export] Typeclasses Transparent is_relaxed.
  Definition is_rel_acq_rcpc := SA.mem_acc_is_rel_acq_rcpc.
  #[export] Typeclasses Transparent is_rel_acq_rcpc.
  Definition is_rel_acq_rcsc := SA.mem_acc_is_rel_acq_rcsc.
  #[export] Typeclasses Transparent is_rel_acq_rcsc.
  Definition is_standalone := SA.mem_acc_is_standalone.
  #[export] Typeclasses Transparent is_standalone.
  Definition is_exclusive := SA.mem_acc_is_exclusive.
  #[export] Typeclasses Transparent is_exclusive.
  Definition is_atomic_rmw := SA.mem_acc_is_atomic_rmw.
  #[export] Typeclasses Transparent is_atomic_rmw.

  Definition abort := SA.abort.
  #[export] Typeclasses Transparent abort.

  Definition barrier := SA.barrier.
  #[export] Typeclasses Transparent barrier.
  Definition barrier_eq := SA.barrier_eq.
  #[export] Typeclasses Transparent barrier_eq.
  Definition cache_op := SA.cache_op.
  #[export] Typeclasses Transparent cache_op.
  Definition cache_op_eq := SA.cache_op_eq.
  #[export] Typeclasses Transparent cache_op_eq.
  Definition tlbi := SA.tlbi.
  #[export] Typeclasses Transparent tlbi.
  Definition tlbi_eq := SA.tlbi_eq.
  #[export] Typeclasses Transparent tlbi_eq.
  Definition exn := SA.exn.
  #[export] Typeclasses Transparent exn.
  Definition exn_eq := SA.exn_eq.
  #[export] Typeclasses Transparent exn_eq.
  Definition trans_start := SA.trans_start.
  #[export] Typeclasses Transparent trans_start.
  Definition trans_start_eq := SA.trans_start_eq.
  #[export] Typeclasses Transparent trans_start_eq.
  Definition trans_end := SA.trans_end.
  #[export] Typeclasses Transparent trans_end.
  Definition trans_end_eq := SA.trans_end_eq.
  #[export] Typeclasses Transparent trans_end_eq.
End ArchFromSail.

Module Type ArchFromSailT (SA : SailArch) (AE : ArchExtra SA).
  Include ArchFromSail SA AE.
End ArchFromSailT.


Module IMonFromSail (SA : SailArch) (SI : SailInterfaceT SA)
  (AE : ArchExtra SA) (Arch : ArchFromSailT SA AE) (I : InterfaceT Arch).
  Import Arch.
  Import I.
  Import (coercions) SA.

  Definition MemReq_from_sail_read {n nt} (rr : SI.ReadReq.t n nt) : MemReq.t :=
    {|MemReq.address := rr.(SI.ReadReq.address);
      MemReq.access_kind := rr.(SI.ReadReq.access_kind);
      MemReq.address_space := rr.(SI.ReadReq.address_space);
      MemReq.size := n;
      MemReq.num_tag := nt;
    |}.

  Definition MemReq_from_sail_announce {n nt} (rr : SI.AddressAnnounce.t n nt) : MemReq.t :=
    {|MemReq.address := rr.(SI.AddressAnnounce.address);
      MemReq.access_kind := rr.(SI.AddressAnnounce.access_kind);
      MemReq.address_space := rr.(SI.AddressAnnounce.address_space);
      MemReq.size := n;
      MemReq.num_tag := nt;
    |}.

  Definition MemReq_from_sail_write {n nt} (rr : SI.WriteReq.t n nt) : MemReq.t :=
    {|MemReq.address := rr.(SI.WriteReq.address);
      MemReq.access_kind := rr.(SI.WriteReq.access_kind);
      MemReq.address_space := rr.(SI.WriteReq.address_space);
      MemReq.size := n;
      MemReq.num_tag := nt;
    |}.

  Definition Sail_choose (ct : ChooseType) : I.iMon (choose_type ct) :=
    match ct with
    | ChooseBool => mchoosef
    | ChooseBit => mchoosef
    | ChooseInt => mcall_noret (GenericFail "Can't choose infinite Int")
    | ChooseNat => mcall_noret (GenericFail "Can't choose infinite Nat")
    | ChooseReal => mcall_noret (GenericFail "Can't choose infinite Real")
    | ChooseString => mcall_noret (GenericFail "Can't choose infinite String")
    | ChooseBitvector n =>
        if decide (n < 8)%Z then mchoosef else
          mcall_noret (GenericFail "Can't choose bitvector size over 8")
    | ChooseRange lo hi => mchoosel $ seqZ lo (hi - lo + 1)%Z
    end.

  Definition Sail_nochoose (ct : ChooseType) : I.iMon (choose_type ct) :=
    match ct with
    | ChooseBool => mret false
    | ChooseBit => mret B0
    | ChooseInt => mret 0%Z
    | ChooseNat => mret 0%Z
    | ChooseReal => mcall_noret (GenericFail "Can't choose Real")
    | ChooseString => mret ""
    | ChooseBitvector n => mret (bv_0 _)
    | ChooseRange lo hi => mret lo
    end.

  Definition Sail_outcome_interp (nondet : bool) {A eo} (out : SI.outcome eo A) : I.iMon A :=
    match out with
    | SI.RegRead reg acc => mcall (RegRead reg acc)
    | SI.RegWrite reg acc regval => mcall (RegWrite reg acc regval)
    | SI.MemRead n nt rr =>
        mcall (MemRead (MemReq_from_sail_read rr))
          |$> (Î» o, match o with
                    | Ok (val, tags) => inl (val, tags)
                    | Error a => inr a
                    end)
    | SI.MemWrite n nt wr =>
        mcall (MemWrite (MemReq_from_sail_write wr)
                 wr.(SI.WriteReq.value) wr.(SI.WriteReq.tags))
          |$> (Î» o, match o with
                    | Ok () => inl (Some true)
                    | Error a => inr a
                    end)
    | SI.MemAddressAnnounce n nt aa =>
        mcall (MemWriteAddrAnnounce (MemReq_from_sail_announce aa))
    | SI.InstrAnnounce _ => mret ()
    | SI.BranchAnnounce _ _ => mret ()
    | SI.Barrier b => mcall (Barrier b)
    | SI.CacheOp cop => mcall (CacheOp cop)
    | SI.TlbOp top => mcall (TlbOp top)
    | SI.TakeException fault => mcall (TakeException fault)
    | SI.ReturnException => mcall ReturnException
    | SI.TranslationStart ts => mcall (TranslationStart ts)
    | SI.TranslationEnd te => mcall (TranslationEnd te)
    | SI.GenericFail msg => mcall_noret (GenericFail msg)
    | SI.CycleCount => mret ()
    | SI.GetCycleCount => mcall_noret (GenericFail "GetCycleCount not supported")
    | SI.Choose ct => if nondet then Sail_choose ct else Sail_nochoose ct
    | SI.Discard => mdiscard
    | SI.Message _ => mret () (* TODO support this *)
    | SI.ExtraOutcome e => mcall_noret (GenericFail "ExtraOutcome not supported")
    end.

  Fixpoint iMon_from_Sail (nondet : bool) {A eo} (smon: SI.iMon eo A): I.iMon A :=
    match smon with
    | SI.Ret a => mret a
    | SI.Next out k =>
        r â Sail_outcome_interp nondet out;
        iMon_from_Sail nondet (k r)
    end.
End IMonFromSail.
